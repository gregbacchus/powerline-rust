---
env:
  PACKAGE_NAME: powerline-rust
  PACKAGE_DESCRIPTION: powerline-shell written in Rust
  PACKAGE_ARCH: amd64
  RUST_TARGET: x86_64-unknown-linux-musl
  CARGO_USE_CROSS: true

name: Build, package and upload
"on":
  push:
    paths-ignore:
      - "*.md"
      - LICENSE
      - rustfmt.toml
      - .github/renovate.json
      - .gitignore
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Install cargo tarpaulin
        run: cargo install cargo-tarpaulin
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features
      - uses: actions-rs/cargo@v1
        with:
          command: tarpaulin
          args: --out Xml
      # - uses: codecov/codecov-action@v3
      #   with:
      #     fail_ci_if_error: true
      #   if: always()
  make_multiarch:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - arm-unknown-linux-musleabihf
          - aarch64-unknown-linux-musl
    name: Make multi-arch binaries
    needs: build_and_test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Build fish version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --target=${{ matrix.target }} --no-default-features --features=fish-shell,libgit,cli-options,time
      - name: Compress fish binary
        run: tar -czvf target/fish-$TARGET.tar.gz -C target/$TARGET/release powerline
        env:
          TARGET: ${{ matrix.target }}
      - name: Build bash version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --target=${{ matrix.target }} --no-default-features --features=bash-shell,libgit,cli-options,time
      - name: Compress bare binary
        run: tar -czvf target/bash-$TARGET.tar.gz -C target/$TARGET/release powerline
        env:
          TARGET: ${{ matrix.target }}
      - name: Build zsh version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --target=${{ matrix.target }} --no-default-features --features=zsh-shell,libgit,cli-options,time
      - name: Compress zsh binary
        run: tar -czvf target/zsh-$TARGET.tar.gz -C target/$TARGET/release powerline
        env:
          TARGET: ${{ matrix.target }}
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: target/*.tar.gz
  make_macos:
    name: Make MacOS binaries
    needs: build_and_test
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
      - name: Build fish version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --no-default-features --features=fish-shell,libgit,cli-options,time
      - name: Compress fish binary
        run: ls target/; tar -czvf target/fish-macos.tar.gz -C target/x86_64-apple-darwin/release powerline
      - name: Build bash version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --no-default-features --features=bash-shell,libgit,cli-options,time
      - name: Compress bare binary
        run: tar -czvf target/bash-macos.tar.gz -C target/x86_64-apple-darwin/release powerline
      - name: Build zsh version
        uses: actions-rs/cargo@v1
        with:
          command: build
          use-cross: true
          args: --release --no-default-features --features=zsh-shell,libgit,cli-options,time
      - name: Compress zsh binary
        run: tar -czvf target/zsh-macos.tar.gz -C target/x86_64-apple-darwin/release powerline
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: target
          path: target/*.tar.gz
  create-release:
    name: Create Github release
    needs:
      - make_multiarch
      - make_macos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: target
          path: built
      - name: list
        run: |
          pwd ; \
          find /home/runner/work/powerline-rust/powerline-rust/built ;
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            LICENSE
            built/*.tar.gz
  # build-package:
  #   name: Build deb packages
  #   needs: make_multiarch
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/download-artifact@v3
  #       with:
  #         name: target
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         bundler-cache: true
  #         working-directory: ./packaging
  #     - name: Make deb package
  #       working-directory: ./packaging
  #       run: |
  #         export DEB_VERSION="$(cat ../Cargo.toml | grep "^version = " | awk  '{gsub(/"/, "", $3); print $3}')-$(printf "%04d" $GITHUB_RUN_NUMBER)"
  #         find .. -type f \( -name "powerline" -o -name "powerline-bare" \) -exec chmod +x {} \;
  #         for build in amd64,x86_64-unknown-linux-musl armhf,arm-unknown-linux-musleabihf aarch64,aarch64-unknown-linux-musl; do
  #           IFS=',' read arch target <<< "${build}";
  #           bundle exec fpm -f \
  #           -s dir \
  #           -t deb \
  #           --deb-priority optional \
  #           --maintainer github@growse.com \
  #           --vendor github@growse.com \
  #           --license MIT \
  #           -n $DEB_NAME \
  #           --description "$APP_DESCRIPTION" \
  #           --url $APP_URL \
  #           --prefix / \
  #           -a $DEB_ARCH \
  #           -v $DEB_VERSION \
  #           ../${target}/release/powerline=/usr/bin/powerline-rust \
  #           ../${target}/release/powerline-bare=/usr/bin/powerline-rust-bare
  #         done
  #       env:
  #         DEB_NAME: ${{ env.PACKAGE_NAME }}
  #         APP_DESCRIPTION: ${{ env.PACKAGE_DESCRIPTION }}
  #         APP_URL: https://github.com/${{ github.repository }}
  #         DEB_ARCH: ${{ env.PACKAGE_ARCH }}
  #     - name: Upload artifacts
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: deb-packages
  #         path: "packaging/*.deb"
  # publish:
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   needs: build-package
  #   steps:
  #     - name: Download build artifact
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: deb-packages
  #     - name: Upload to Apt repo
  #       env:
  #         APT_CREDENTIALS: ${{ secrets.APT_CREDENTIALS }}
  #         APT_KEY_PASSPHRASE: ${{ secrets.APT_KEY_PASSPHRASE }}
  #       run: |
  #         echo $APT_CREDENTIALS > aptly-auth
  #         find -maxdepth 1 -name "*.deb" -exec curl -f --netrc-file aptly-auth -XPOST -F file=@{} https://apttoo.growse.com/api/files/powerline \;
  #         export result=$(curl -f --netrc-file aptly-auth -X POST https://apttoo.growse.com/api/repos/defaultrepo/file/powerline)
  #         echo $result
  #         export failed=$(echo $result | jq '.FailedFiles | length')
  #         if [[ "$failed" != "0" ]]; then exit 1; fi
  #         curl -f --netrc-file aptly-auth -X PUT -H"Content-type: application/json" --data '{"Signing":{"Passphrase":"'"$APT_KEY_PASSPHRASE"'","Batch":true}}' https://apttoo.growse.com/api/publish/:./stablish
